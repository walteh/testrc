name: build

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true
permissions:
    {
        id-token: write,
        contents: write,
        packages: write,
        actions: write,
        deployments: write,
        pull-requests: write,
        issues: write,
        statuses: write,
        checks: write,
    }
on:
    workflow_dispatch:
    pull_request:
        paths-ignore:
            - "README.md"
            - "docs/**"

    push:
        branches: [main]

env:
    BUILDX_VERSION: "latest"
    BUILDKIT_IMAGE: "moby/buildkit:latest"
    REPO_SLUG: ${{ github.repository }}
    DESTDIR: "./bin"
    TEST_CACHE_SCOPE: "test"
    DOCKERHUB_USERNAME: walteh

jobs:
    test:
        runs-on: ubuntu-22.04
        needs:
            - build
            - prepare-build
        strategy:
            matrix:
                level: ${{ fromJson(needs.prepare-build.outputs.test_matrix) }}
        env:
            TESTFLAGS: "-v --parallel=6 --timeout=30m"
            TESTFLAGS_DOCKER: "-v --parallel=1 --timeout=30m"
            GOTESTSUM_FORMAT: "standard-verbose"
            TEST_IMAGE_BUILD: "0"
            TEST_IMAGE_ID: "buildx-tests"
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: download binaries
              uses: actions/download-artifact@v3
              with:
                  name: buildx
                  path: rebin
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up just
              uses: taiki-e/install-action@just
            - name: set up buildx
              uses: docker/setup-buildx-action@v3
            - name: bake ${{ matrix.level }}
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: ${{ matrix.level }}
                  set: |
                      *.output=type=docker,name=${{matrix.level}}
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max
            - name: run tests
              run: docker run --network host -v /var/run/docker.sock:/var/run/docker.sock -v ./testout:/out ${{matrix.level}}
            - name: send to codecov
              if: always()
              uses: codecov/codecov-action@v3
              with:
                  directory: ./testout
            - name: generate annotations
              if: always()
              uses: crazy-max/.github/.github/actions/gotest-annotations@1a64ea6d01db9a48aa61954cb20e265782c167d9
              with:
                  directory: ./testout
            - name: upload test reports
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: test-reports
                  path: ./testout

    prepare-build:
        runs-on: ubuntu-22.04
        outputs:
            build_matrix: ${{ steps.platforms.outputs.build_matrix }}
            test_matrix: ${{ steps.platforms.outputs.test_matrix }}
            validate_matrix: ${{ steps.platforms.outputs.validate_matrix }}
        steps:
            - name: checkout
              uses: actions/checkout@v4
            - name: create matrix
              id: platforms
              run: |
                  echo "build_matrix=$(docker buildx bake release --print | jq -cr '.target.release.platforms')" >>${GITHUB_OUTPUT}
                  echo "test_matrix=$(docker buildx bake test --print | jq -cr '.group.test.targets')" >>${GITHUB_OUTPUT}
                  echo "validate_matrix=$(docker buildx bake validate --print | jq -cr '.group.validate.targets')" >>${GITHUB_OUTPUT}
            - name: show matrix
              run: |
                  echo "build_matrix = ${{ steps.platforms.outputs.build_matrix }}"
                  echo "test_matrix = ${{ steps.platforms.outputs.test_matrix }}"
                  echo "validate_matrix = ${{ steps.platforms.outputs.validate_matrix }}"

    build:
        runs-on: ubuntu-22.04
        needs:
            - prepare-build
        strategy:
            fail-fast: false
            matrix:
                platform: ${{ fromJson(needs.prepare-build.outputs.build_matrix) }}
        steps:
            - name: prepare
              id: prepare
              run: |
                  platform=${{ matrix.platform }}
                  echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_OUTPUT
            - name: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up just
              uses: taiki-e/install-action@just
            - name: set up buildx
              uses: docker/setup-buildx-action@v3
            - name: bake release
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: release
                  set: |
                      *.output=type=local,dest=./rebin/
                      *.platform=${{ matrix.platform }}
                      *.cache-from=type=gha,scope=build-${{ steps.prepare.outputs.PLATFORM_PAIR }}
                      *.cache-to=type=gha,scope=build-${{ steps.prepare.outputs.PLATFORM_PAIR }},mode=max
            - name: bake package
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: package
                  set: |
                      *.contexts.released=./rebin/
                      *.cache-from=type=gha,scope=build-${{ steps.prepare.outputs.PLATFORM_PAIR }}
                      *.cache-to=type=gha,scope=build-${{ steps.prepare.outputs.PLATFORM_PAIR }},mode=max

            - name: upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: buildx
                  path: ${{ env.DESTDIR }}/*
                  if-no-files-found: error

    registry:
        runs-on: ubuntu-22.04
        needs:
            - release
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: download build
              uses: actions/download-artifact@v3
              with:
                  name: buildx
                  path: rebin
            - name: check
              run: ls -la rebin
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up just
              uses: taiki-e/install-action@just
            - name: set up buildx
              uses: docker/setup-buildx-action@v3
            - name: bake meta
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: meta
                  set: |
                      *.output=type=local,dest=./meta-output
            - id: meta
              run: |
                  echo "version=$(cat ./meta-output/meta/version)" >> $GITHUB_OUTPUT
                  echo "revision=$(cat ./meta-output/meta/revision)" >> $GITHUB_OUTPUT
            - name: docker meta
              id: docker-meta
              uses: docker/metadata-action@v4
              with:
                  images: |
                      ${{ env.REPO_SLUG }}
                      ghcr.io/${{ env.REPO_SLUG }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}},value=${{ steps.meta.outputs.version }},enable=${{ github.ref == 'refs/heads/main' }}
                      type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
                  bake-target: meta-helper
            - name: login to dockerhub
              uses: docker/login-action@v2
              with:
                  username: ${{ env.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}
            - name: login to ghcr
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: bake registry and push
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                      ${{ steps.meta.outputs.bake-file }}
                  targets: registry
                  push: true
                  sbom: true
                  set: |
                      *.cache-from=type=gha,scope=bin-image
                      *.cache-to=type=gha,scope=bin-image,mode=max

    release:
        runs-on: ubuntu-22.04
        needs:
            - test
            - build
            - validate
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: download build
              uses: actions/download-artifact@v3
              with:
                  name: buildx
                  path: ${{ env.DESTDIR }}
            - name: set up buildx
              uses: docker/setup-buildx-action@v3
            - name: bake meta
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: meta
                  set: |
                      *.output=type=local,dest=./meta-output
            - id: meta
              run: |
                  echo "version=$(cat ./meta-output/meta/version)" >> $GITHUB_OUTPUT
                  echo "revision=$(cat ./meta-output/meta/revision)" >> $GITHUB_OUTPUT
            - name: bake
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: checksum
                  set: |
                      *.output=type=local,dest=${{ env.DESTDIR }}
            - name: list artifacts
              run: tree -nh ${{ env.DESTDIR }}
            - name: check artifacts
              run: find ${{ env.DESTDIR }} -type f -exec file -e ascii -- {} +
            - name: github release
              #   if: startsWith(github.ref, 'refs/tags/v')
              uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v0.1.15
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  draft: false
                  prerelease: true
                  files: ${{ env.DESTDIR }}/*
                  tag_name: ${{ steps.meta.outputs.version }}
                  target_commitish: ${{ github.sha }}
                  name: ${{ steps.meta.outputs.version }}

    buildkit-edge:
        runs-on: ubuntu-22.04
        continue-on-error: true
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: set up qemu
              uses: docker/setup-qemu-action@v2
            - name: set up just
              uses: taiki-e/install-action@just
            - name: set up buildx
              uses: docker/setup-buildx-action@v3
              with:
                  version: ${{ env.BUILDX_VERSION }}
                  driver-opts: image=moby/buildkit:master
                  buildkitd-flags: --debug
            - # Just run a bake target to check eveything runs fine
              name: Build
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: build

    validate:
        runs-on: ubuntu-22.04
        needs: [prepare-build]
        strategy:
            fail-fast: false
            matrix:
                target: ${{ fromJson(needs.prepare-build.outputs.validate_matrix) }}
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - name: set up just
              uses: taiki-e/install-action@just
            - name: set up buildx
              uses: docker/setup-buildx-action@v3
              with:
                  version: latest
            - name: build
              uses: docker/bake-action@v3
              with:
                  files: ./docker-bake.hcl
                  targets: ${{ matrix.target }}
